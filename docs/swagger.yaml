openapi: 3.0.0
info:
  title: World Happiness Rankings
  description: This API has been created to support the assessment in QUT's CAB230 Web Computing unit. It exposes a small number of REST endpoints which implement CRUD operations on a database containing publicly available data from the World Happiness Report (https://en.wikipedia.org/wiki/World_Happiness_Report) - an annual survey that ranks the overall happiness of a country according to the views of its citizens on a range of happiness measures. This API provides access to the survey data for the years 2015 to 2020 (inclusive). The API endpoints and their usage are described in detail below.

  version: 1.0.0

components:
  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /rankings:
    get:
      tags: [Data]
      description: Returns a list of countries and their happiness rank for the years 2015 to 2020. The list is arranged by year, in descending order. The list can optionally be filtered by year and/or country name using query parameters.
      parameters:
        - in: query
          name: year
          required: false
          description: Year of world happiness report
        - in: query
          name: country
          required: false
          description: Name of country
           
      responses:
        "200":
          description: A JSON array of stock listing objects comprising name, symbol and industry sector
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: Agilent Technologies Inc
                    symbol:
                      type: string
                      example: A
                    industry:
                      type: string
                      example: Health Care
        "400":
          description: Invalid query parameter
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Invalid query parameter: only 'industry' is permitted
        "404":
          description: Industry sector not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Industry sector not found
  /countries:
    get:
      tags: [Data]
      description:  Returns a list of all surveyed countries, ordered alphabetically.
      responses:
        "200":
          description: An array of countries. An example of the first five elements in the array is shown below.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  - Afghanistan
                  - Albania
                  - Algeria
                  - Angola
                  - Argentina

               
        "400":
          description: Invalid query parameter(s)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Invalid query parameters. Query parameters are not permitted.
  /factors/{year}:
    get:
      tags: [Data]
      description: Returns a list of countries and their associated happiness factor scores for the specified year. The path parameter (year) is required. The number of returned results can be limited by the optional limit query parameter. A result for a single country can be obtained via the optional country query parameter. This route also requires the user to be authenticated - a valid JWT token must be sent in the header of the request. To test this route using Swagger, click the green 'Authorize' button at the top of this page to enter your JWT token. A JWT token can be obtained by logging in.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: year
          required: true
          description: Year of world happiness report
        - in: query
          name: limit
          description: The maximum number of results to return
        - in: query
          name: country
          description: Name of country
      responses:
        "200":
          description: An array of objects containing happiness rank, country, score, economy, family, health, freedom, generosity and trust properties. An example of one object in the array is shown below. 
          content:
            application/json:
              schema:
                type: object
                properties:
                  rank:
                    type: number
                    example: 1
                  country:
                    type: string
                    example: Finland
                  score:
                    type: string
                    example: 7.769
                  economy:
                    type: string
                    example: 1.340
                  family:
                    type: string
                    example: 1.587
                  health:
                    type: string
                    example: 1.340
                  freedom:
                    type: string
                    example: 0.596
                  generosity:
                    type: string
                    example: 0.153
                  trust:
                    type: string
                    example: 0.393
        "400":
          description: Invalid parameters. Click on 'Schema' below to see the possible error responses.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Invalid year format. Format must be yyyy.
        "401":
          description: Unauthorized. Click on 'Schema' below to see the possible error responses.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Authorization header ('Bearer token') not found
  /user/register:
    post:
      tags: [Authentication]
      description: Creates a new user account. A request body containing the user to be registered must be sent.
      requestBody:
        description: User object to be registered
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: mike@gmail.com
                password:
                  type: string
                  example: asdlkfj1
      responses:
        "201":
          description: User successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Request body incomplete, both email and password are required
        "409":
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User already exists
  /user/login:
    post:
      tags: [Authentication]
      description: Log in to an existing user account. A request body containing the user credentials must be sent.
      requestBody:
        description: User object used to log in
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: example@api.com
                password:
                  type: string
                  example: asdlkfj1
      responses:
        "200":
          description: Log in successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: afakejsonwebtoken
                  token_type:
                    type: string
                    example: Bearer
                  expires:
                    type: number
                    example: 86400
        "401":
          description: Log in failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Incorrect email or password
        "400":
          description: Invalid log in request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Request body invalid - email and password are required
  /user/{email}/profile:
    get:
      tags: [Profile]
      description: Returns an object containing a user's profile information. The path parameter (email) is required and must be an email that has been registered. This route returns additional information if the user is authenticated. To be authenticated, a valid JWT token must be sent in the header of the request. To test this using Swagger, click the green 'Authorize' button at the top of this page to enter your JWT token. A JWT token can be obtained by logging in.
      security:
      - bearerAuth: []
      parameters:
        - in: path
          name: year
          required: true
          description: Email address of a registerd user
      responses:
        "200":
          description: An object containing email, firstName, lastName, address (authenticated only) and dob (authenticated only) properties. An example object for an authenticated request is shown below. If no profile information has been entered for the user via the profile PUT request route, all returned values except email are expected to be null. Click on 'Schema' below to see a response example for an unauthenticated request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    example: mike@gmail.com
                  firstName:
                    type: string
                    example: Michael
                  lastName:
                    type: string
                    example: Jordan
                  dob:
                    type: string
                    example: "1963-02-17"
                  address:
                    type: string
                    example: "123 Fake Street, Springfield"
        "401":
          description: Unauthorized. Click on 'Schema' below to see the possible error responses.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: JWT token has expired
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User not found
  /user/{email}/profile:
    put:
      tags: [Profile]
      description: Updates a user's profile information. The path parameter (email) is required and must be an email that has been registered. A request body containing the user's profile information must be sent. This route returns an object containing the user's updated profile information. This route also requires the user to be authenticated - a valid JWT token must be sent in the header of the request. To test this route using Swagger, click the green 'Authorize' button at the top of this page to enter your JWT token. A JWT token can be obtained by logging in.
      security:
      - bearerAuth: []
      parameters:
        - in: path
          name: year
          required: true
          description: Email address of a registerd user
      responses:
        "200":
          description: An object containing email, firstName, lastName, address (authenticated only) and dob (authenticated only) properties. An example object for an authenticated request is shown below. If no profile information has been entered for the user via the profile PUT request route, all returned values except email are expected to be null. Click on 'Schema' below to see a response example for an unauthenticated request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    example: mike@gmail.com
                  firstName:
                    type: string
                    example: Michael
                  lastName:
                    type: string
                    example: Jordan
                  dob:
                    type: string
                    example: "1963-02-17"
                  address:
                    type: string
                    example: "123 Fake Street, Springfield"
        "401":
          description: Unauthorized. Click on 'Schema' below to see the possible error responses.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: JWT token has expired
                
  
