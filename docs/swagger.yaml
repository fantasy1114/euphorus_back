openapi: 3.0.3
info:
  version: 1.0.0
  title: World Happiness Rankings
  description: >-
    This API has been created to support the assessment in QUT's CAB230 Web
    Computing unit. It exposes a small number of REST endpoints which implement
    CRUD operations on a database containing publicly available data from the
    World Happiness Report (<a
    href="https://en.wikipedia.org/wiki/World_Happiness_Report"
    target="_blank">https://en.wikipedia.org/wiki/World_Happiness_Report</a>) -
    an annual survey that ranks the overall happiness of a country according to
    the views of its citizens on a range of happiness measures. This API
    provides access to the survey data for the years 2015 to 2020 (inclusive).
    The API endpoints and their usage are described in detail below.
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: Enter JWT Bearer token **_only_**
      name: Authorization
      in: header
  schemas:
    InvalidProfileBodyFormat:
      type: object
      properties:
        error:
          type: boolean
          example: "true"
        message:
          type: string
          example: >-
            Request body incomplete: firstName, lastName, dob and address are
            required.
    InvalidFirstNameLastNameAddressFormat:
      type: object
      properties:
        error:
          type: boolean
          example: "true"
        message:
          type: string
          example: >-
            Request body invalid, firstName, lastName and address must be
            strings only.
    InvalidProfileDateFormat:
      type: object
      properties:
        error:
          type: boolean
          example: "true"
        message:
          type: string
          example: "Invalid input: dob must be a real date in format YYYY-MM-DD."
    InvalidProfileDate:
      type: object
      properties:
        error:
          type: boolean
          example: "true"
        message:
          type: string
          example: "Invalid input: dob must be a date in the past."
    InvalidCountryFormat:
      type: object
      properties:
        error:
          type: boolean
          example: "true"
        message:
          type: string
          example: >-
            Invalid country format. Country query parameter cannot contain
            numbers.
    InvalidYearFormat:
      type: object
      properties:
        error:
          type: boolean
          example: "true"
        message:
          type: string
          example: Invalid year format. Format must be yyyy.
    InvalidParametersRankings:
      type: object
      properties:
        error:
          type: boolean
          example: "true"
        message:
          type: string
          example: Invalid query parameters. Only year and country are permitted.
    InvalidParametersFactors:
      type: object
      properties:
        error:
          type: boolean
          example: "true"
        message:
          type: string
          example: Invalid query parameters. Only limit and country are permitted.
    InvalidLimitFormat:
      type: object
      properties:
        error:
          type: boolean
          example: "true"
        message:
          type: string
          example: Invalid limit query. Limit must be a positive number.
    MissingAuthHeader:
      type: object
      properties:
        error:
          type: boolean
          example: "true"
        message:
          type: string
          example: Authorization header ('Bearer token') not found
    TokenExpired:
      type: object
      properties:
        error:
          type: boolean
          example: "true"
        message:
          type: string
          example: JWT token has expired
    InvalidJWT:
      type: object
      properties:
        error:
          type: boolean
          example: "true"
        message:
          type: string
          example: Invalid JWT token
    MalformedAuthHeader:
      type: object
      properties:
        error:
          type: boolean
          example: "true"
        message:
          type: string
          example: Authorization header is malformed
    PublicProfile:
      type: object
      properties:
        email:
          type: string
          example: mike@gmail.com
        firstName:
          type: string
          example: Michael
        lastName:
          type: string
          example: Jordan
    AuthenticatedProfile:
      type: object
      properties:
        email:
          type: string
          example: mike@gmail.com
        firstName:
          type: string
          example: Michael
        lastName:
          type: string
          example: Jordan
        dob:
          type: string
          example: "1963-02-17"
          format: date
          pattern: "YYYY-MM-DD"
        address:
          type: string
          example: "123 Fake Street, Springfield"
produces:
  - application/json
paths:
  /rankings:
    get:
      tags:
        - Data
      description: >-
        Returns a list of countries and their happiness rank for the years 2015
        to 2020. The list is arranged by year, in descending order. The list can
        optionally be filtered by year and/or country name using query
        parameters.
      parameters:
        - name: year
          in: query
          description: Year of world happiness report
          required: false
          type: number
        - name: country
          in: query
          description: Name of country
          required: false
          type: string
      responses:
        "200":
          description: >-
            An array of objects containing happiness rank, country, score and
            year properties. An example of one object in the array is shown
            below.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    rank:
                      type: number
                      example: "1"
                    country:
                      type: string
                      example: Finland
                    score:
                      type: number
                      example: "7.769"
                    year:
                      type: number
                      example: "2019"
        "400":
          description: >-
            Invalid country or year query parameters. Click on 'Schema' below to
            see the possible error responses.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/InvalidCountryFormat"
                  - $ref: "#/components/schemas/InvalidYearFormat"
                  - $ref: "#/components/schemas/InvalidParametersRankings"
  /countries:
    get:
      tags:
        - Data
      description: "Returns a list of all surveyed countries, ordered alphabetically."
      responses:
        "200":
          description: >-
            An array of countries. An example of the first five elements in the
            array is shown below.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  - Afghanistan
                  - Albania
                  - Algeria
                  - Angola
                  - Argentina
        "400":
          description: Invalid query parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: "true"
                  message:
                    type: string
                    example: >-
                      Invalid query parameters. Query parameters are not
                      permitted.
  "/factors/{year}":
    get:
      tags:
        - Data
      description: >-
        Returns a list of countries and their associated happiness factor scores
        for the specified year. The path parameter (year) is required. The
        number of returned results can be limited by the optional limit query
        parameter. A result for a single country can be obtained via the
        optional country query parameter. This route also requires the user to
        be authenticated - a valid JWT token must be sent in the header of the
        request. To test this route using Swagger, click the green 'Authorize'
        button at the top of this page to enter your JWT token. A JWT token can
        be obtained by logging in.
      parameters:
        - name: year
          in: path
          description: Year of world happiness report
          required: true
          schema:
            type: number
        - name: limit
          in: query
          description: The maximum number of results to return
          schema:
            type: number
        - name: country
          in: query
          description: Name of country
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: >-
            An array of objects containing happiness rank, country, score,
            economy, family, health, freedom, generosity and trust properties.
            An example of one object in the array is shown below.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    rank:
                      type: number
                      example: "1"
                    country:
                      type: string
                      example: Finland
                    score:
                      type: string
                      example: "7.769"
                    economy:
                      type: string
                      example: "1.340"
                    family:
                      type: string
                      example: "1.587"
                    health:
                      type: string
                      example: "1.340"
                    freedom:
                      type: string
                      example: "0.596"
                    generosity:
                      type: string
                      example: "0.153"
                    trust:
                      type: string
                      example: "0.393"
        "400":
          description: >-
            Invalid parameters. Click on 'Schema' below to see the possible
            error responses.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/InvalidYearFormat"
                  - $ref: "#/components/schemas/InvalidParametersFactors"
                  - $ref: "#/components/schemas/InvalidLimitFormat"
                  - $ref: "#/components/schemas/InvalidCountryFormat"
        "401":
          description: >-
            Unauthorized. Click on 'Schema' below to see the possible error
            responses.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/MissingAuthHeader"
                  - $ref: "#/components/schemas/TokenExpired"
                  - $ref: "#/components/schemas/InvalidJWT"
                  - $ref: "#/components/schemas/MalformedAuthHeader"
  /user/register:
    post:
      tags:
        - Authentication
      description: >-
        Creates a new user account. A request body containing the user to be
        registered must be sent.
      requestBody:
        description: >-
          An object containing the email and password of the user to be
          registered.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: mike@gmail.com
                password:
                  type: string
                  example: password
      responses:
        "201":
          description: User successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: "true"
                  message:
                    type: string
                    example: >-
                      Request body incomplete, both email and password are
                      required
        "409":
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: "true"
                  message:
                    type: string
                    example: User already exists
  /user/login:
    post:
      description: >-
        Log in to an existing user account. A request body containing the user
        credentials must be sent.
      tags:
        - Authentication
      requestBody:
        description: The credentials of the user to log in.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: mike@gmail.com
                password:
                  type: string
                  example: password
      responses:
        "200":
          description: Log in successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: ajsonwebtoken
                  token_type:
                    type: string
                    example: Bearer
                  expires_in:
                    type: number
                    example: 86400
        "400":
          description: Invalid log in request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: "true"
                  message:
                    type: string
                    example: >-
                      Request body incomplete, both email and password are
                      required
        "401":
          description: Log in failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: "true"
                  message:
                    type: string
                    example: Incorrect email or password
  /user/{email}/profile:
    get:
      description: >-
        Returns an object containing a user's profile information. The path parameter (email) is required and must be an email that has been registered. This route returns additional information if the user is authenticated. To be authenticated, a valid JWT token must be sent in the header of the request. To test this using Swagger, click the green 'Authorize' button at the top of this page to enter your JWT token. A JWT token can be obtained by logging in.
      tags:
        - Profile
      parameters:
        - name: email
          in: path
          description: Email address of a registered user
          required: true
          type: string
          schema:
            type: string
      responses:
        "200":
          description: An object containing email, firstName, lastName, address (authenticated only) and dob (authenticated only) properties. An example object for an authenticated request is shown below. If no profile information has been entered for the user via the profile PUT request route, all returned values except email are expected to be null. Click on 'Schema' below to see a response example for an unauthenticated request.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/AuthenticatedProfile"
                  - $ref: "#/components/schemas/PublicProfile"
        "401":
          description: Unauthorized. Click on 'Schema' below to see the possible error responses.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/TokenExpired"
                  - $ref: "#/components/schemas/InvalidJWT"
                  - $ref: "#/components/schemas/MalformedAuthHeader"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: "true"
                  message:
                    type: string
                    example: >-
                      User not found
    put:
      description: >-
        Updates a user's profile information. The path parameter (email) is required and must be an email that has been registered. A request body containing the user's profile information must be sent. This route returns an object containing the user's updated profile information. This route also requires the user to be authenticated - a valid JWT token must be sent in the header of the request. To test this route using Swagger, click the green 'Authorize' button at the top of this page to enter your JWT token. A JWT token can be obtained by logging in.
      tags:
        - Profile
      parameters:
        - name: email
          in: path
          description: Email address of a registered user
          required: true
          type: string
          schema:
            type: string
      requestBody:
        description: An object containing the user's firstName, lastName, dob and address. firstName, lastName and address must be strings. dob must be a validate date string in the past matching the format YYYY-MM-DD. All key/value pairs are required.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: Michael
                lastName:
                  type: string
                  example: Jordan
                dob:
                  type: string
                  example: 1963-02-17
                address:
                  type: string
                  example: 123 Fake Street, Springfield

      responses:
        "200":
          description: An object containing the user's updated profile information. The object should contain email, firstName, lastName, dob and address properties. An example object is shown below.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/AuthenticatedProfile"
        "400":
          description: Bad request. Click on 'Schema' below to see the possible error responses.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/InvalidProfileBodyFormat"
                  - $ref: "#/components/schemas/InvalidFirstNameLastNameAddressFormat"
                  - $ref: "#/components/schemas/InvalidProfileDateFormat"
                  - $ref: "#/components/schemas/InvalidProfileDate"
        "401":
          description: Unauthorized. Click on 'Schema' below to see the possible error responses.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/MissingAuthHeader"
                  - $ref: "#/components/schemas/TokenExpired"
                  - $ref: "#/components/schemas/InvalidJWT"
                  - $ref: "#/components/schemas/MalformedAuthHeader"
        "403":
          description: Forbidden. Email address associated with JWT token is not the same as email provided in path parameter.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Forbidden"
